getwd()
qqplot(rnorm(100))
qqplot(y=rnorm(100))
qqplot(x=rnorm(100),y=rnorm(100))
qqplot(x=rnorm(200),y=rnorm(100))
from <- "4.731173, -74.053204"
to <- "Universidad de los Andes"
route_df <- route(from, to, structure = "route")
library(ggmap)
route_df <- route(from, to, structure = "route")
ggmap(Bogota)+geom_path(aes(x = lon, y = lat),  colour = "red", size = 1.5,
data = route_df, lineend = "round")
sum(route_df$km,na.rm = T)
setwd("C:/Users/ma.bolivar643/Dropbox/3. DSS/DevelopingDataProducts")
#=========================================================
# Libraries
#=========================================================
library(readr)
library(dplyr)
library(caTools)
library(glmnet)
library(caret)
#=========================================================
library(stringr)
d <- read_csv("./data/tidy.csv")
#Neighborhood as factor
d$neigh <- d$neigh %>% as.factor
d <- subset(d,complete.cases(d))
#Use only complete cases
#Exploration analysis
d[order(d$price,decreasing = T),]
d <- filter(d, price <= 5.00e+07)
#price
hist((d$price))
hist(log(d$price))
d$logprice <- log(d$price)
#Area
d <- filter(d, price <= 5.00e+06)
hist((d$price))
hist(log(d$price))
d$logprice <- log(d$price)
#Area
hist((d$area))
hist(log(d$area))
d$logares <- log(d$area)
#Rooms
hist((d$rms))
d$logares <- log(d$area)
pairs(d)
#Predictive models
set.seed(111)
tobs <- sample.split(d$price,.7)
train <- d[tobs,]
test <- d[-tobs,]
lm1 <- lm(price ~ .-logprice -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
plot(pred_lm,test$price)
MSE_lm
hist((d$price))
hist(log(d$price))
hist((d$area))
hist(log(d$area))
MSE_lm
plot(pred_lm,test$price)
#Ridge & Lasso
x <- model.matrix(price ~ . -logprice -area - published,data=train)[,-1] #removes intercept
y <- train$price
x_t <- model.matrix(price ~ . -logprice -area - published,data=test)[,-1] #removes intercept
y_t <- test$price
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
#RF
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1
)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
MSE_rf
plot(test$price,pred_rf)
abline(0,1,col=2)
MSE_ri
MSE_lm
mf_rf
plot(pred_rf,test$price)
abline(0,1,col=2)
mf_rf <- train(train$logprice ~ . -price -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
MSE_rf
lm1 <- lm(logprice ~ .-price -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
MSE_rf
plot(pred_rf,test$price)
sqrt(5.946295e+12)
MSE_rf <- mean((test$logprice-pred_rf)^2)
MSE_rf
MSE_lm <- mean((pred_lm-test$logprice)^2) #Test error
MSE_lm
x <- model.matrix(logprice ~ . -price -area - published,data=train)[,-1] #removes intercept
y <- train$price
x_t <- model.matrix(logprice ~ . -price -area - published,data=test)[,-1] #removes intercept
y_t <- test$price
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
y_t <- test$logprice
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
MSE_ri
MSE_rf
x <- model.matrix(logprice ~ . -price -area - published,data=train)[,-1] #removes intercept
x <- model.matrix(logprice ~ . -price -area - published,data=train)[,-1] #removes intercept
y <- train$logprice
x_t <- model.matrix(logprice ~ . -price -area - published,data=test)[,-1] #removes intercept
y_t <- test$logprice
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
MSE_rf
MSE_lm
mf_rf
exp(0.2681876)
plot(pred_rf,test$logprice)
abline(0,1,col=2)
mf_rf <- train(train$logprice ~ . + I(area^2) -price -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$logprice-pred_rf)^2)
MSE_rf
mf_rf <- train(train$price ~ . + I(area^2)-logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
MSE_rf
lm1 <- lm(price ~ .-logprice -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
pred_rf
mf_rf
mf_rf <- train(train$price ~ . + I(area^2) +I(area^3)-logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . + I(area^2)+
I(area^3) + I(bathr^2)+ I(bathr^4) +
I(rms^2)+ I(rms^2)-logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . + I(logarea^2)+
I(logarea^3) + I(bathr^2)+ I(bathr^4) +
I(rms^2)+ I(rms^2)-logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
str(train)
mf_rf <- train(train$price ~ . + I(logares^2)+
I(logares^3) + I(bathr^2)+ I(bathr^4) +
I(rms^2)+ I(rms^2)-logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
mf_rf
mf_rf <- train(train$price ~ . + I(logares^2)+
I(logares^3) -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
pred_rf <- predict(mf_rf,newdata=test)
mf_rf
mf_rf <- train(train$price ~ . + I(logares^2)+ -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . + I(logares^2)+ -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . + I(logares^2) -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf <- train(train$price ~ . + I(logares^2) -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
plot(pred_rf,test$price)
plot(pred_rf,test$price, col=test$neigh)
a <- data.frame(test, (test$price-pred_rf)^2))
a <- data.frame(test, e=(test$price-pred_rf)^2)
a
tapply(a$e,INDEX = a$neigh, mean)
sqrt(tapply(a$e,INDEX = a$neigh, mean))
sort(sqrt(tapply(a$e,INDEX = a$neigh, mean)))
d$logarea <- log(d$area)^2
set.seed(111)
tobs <- sample.split(d$price,.7)
train <- d[tobs,]
test <- d[-tobs,]
lm1 <- lm(price ~ .-logprice -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
plot(pred_lm,test$price)
#Ridge & Lasso
x <- model.matrix(price ~ . -logprice -area - published,data=train)[,-1] #removes intercept
y <- train$price
x_t <- model.matrix(price ~ . -logprice -area - published,data=test)[,-1] #removes intercept
y_t <- test$price
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1
)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
mf_rf$call
mf_rf$modelInfo
mf_rf$call
mf_rf$finalModel
mf_rf$perfNames
mf_rf$coefnames
dput(mf_rf$coefnames)
d <- subset(d,complete.cases(d))
#Exploration analysis
#price
d[order(d$price,decreasing = T),]
d <- filter(d, price <= 5.00e+06)
hist((d$price))
hist(log(d$price))
d$logprice <- log(d$price)
#Area
hist((d$area))
hist(log(d$area))
d$logarea <- log(d$area)
d$logarea2 <- log(d$area)^2
#Rooms
hist((d$rms))
d$logares <- log(d$area)
pairs(d)
#Predictive models
set.seed(111)
tobs <- sample.split(d$price,.7)
train <- d[tobs,]
test <- d[-tobs,]
train
hist((d$rms))
hist((d$rms))
pairs(d)
#Predictive models
set.seed(111)
tobs <- sample.split(d$price,.7)
train <- d[tobs,]
test <- d[-tobs,]
lm1 <- lm(price ~ .-logprice -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
plot(pred_lm,test$price)
#Ridge & Lasso
x <- model.matrix(price ~ . -logprice -area - published,data=train)[,-1] #removes intercept
y <- train$price
x_t <- model.matrix(price ~ . -logprice -area - published,data=test)[,-1] #removes intercept
y_t <- test$price
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
#RF
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1
)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
MSE_rf
mf_rf
mf_rf$coefnames
train
d <- read_csv("./data/tidy.csv")
#Neighborhood as factor
d$neigh <- d$neigh %>% as.factor
#Use only complete cases
d <- subset(d,complete.cases(d))
#Exploration analysis
#price
d[order(d$price,decreasing = T),]
d <- filter(d, price <= 5.00e+06)
hist((d$price))
hist(log(d$price))
d$logprice <- log(d$price)
#Area
hist((d$area))
hist(log(d$area))
d$logarea <- log(d$area)
d$logarea2 <- log(d$area)^2
#Rooms
hist((d$rms))
pairs(d)
d
#Rooms
hist((d$rms))
pairs(d)
#Predictive models
set.seed(111)
tobs <- sample.split(d$price,.7)
train <- d[tobs,]
test <- d[-tobs,]
test
test
test
test
test
test
lm1 <- lm(price ~ .-logprice -area - published,data=train)
summary(lm1)
pred_lm <- predict(lm1, newdata=test)
MSE_lm <- mean((pred_lm-test$price)^2) #Test error
MSE_lm
plot(pred_lm,test$price)
#Ridge & Lasso
x <- model.matrix(price ~ . -logprice -area - published,data=train)[,-1] #removes intercept
y <- train$price
x_t <- model.matrix(price ~ . -logprice -area - published,data=test)[,-1] #removes intercept
y_t <- test$price
##CV
set.seed(123)
cv.out <- cv.glmnet(x,y,alpha=1)
plot(cv.out)
bestlam.ri <- cv.out$lambda.min
ridge.pred <- predict(cv.out,s=bestlam.ri,newx=x_t)
MSE_ri <- mean((y_t-ridge.pred)^2)
MSE_ri
#RF
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1
)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf
mf_rf$coefnames
apto <- data.frame(neighCASTILLO=0, neighCHAPINERO=0, neighEMAUS=0,
neighGALERIAS=0,
neighGRANADA=0, neighJAVERIANA=0,
neighMARLY=1, neighPALERMO=0,
neighROSALES=0, neighSOLEDAD=0,
neighTEUSAQUILLO=0, bathr=1,
rms=1, logarea = log(25), logarea2=log(25)^2)
apto
predict(mf_rf,newdata=apto)
apto <- data.frame(neighCASTILLO=0, neighCHAPINERO=0, neighEMAUS=0,
neighGALERIAS=0,
neighGRANADA=0, neighJAVERIANA=0,
neighMARLY=1, neighPALERMO=0,
neighROSALES=0, neighSOLEDAD=0,
neighTEUSAQUILLO=0, bathr=1,
rms=1, logarea = log(25), logarea2=log(25)^2,
published=0)
pred_rf <- predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, logarea = log(25), logarea2=log(25)^2,
published=0)
pred_rf <- predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=0)
pred_rf <- predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=0, logprice=0)
pred_rf <- predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=as.Date("05/05/2015"), logprice=0)
pred_rf <- predict(mf_rf,newdata=apto)
pred_rf
pred_rf <- predict(mf_rf,newdata=test)
MSE_rf <- mean((test$price-pred_rf)^2)
a <- data.frame(test, e=(test$price-pred_rf)^2)
tapply(a$e,INDEX = a$neigh, mean)
plot(pred_rf,test$price, col=test$neigh)
abline(0,1,col=2)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="PALERMO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
tapply(a$e,INDEX = a$neigh, sqrt(mean))
tapply(a$e,INDEX = a$neigh, function(x) sqrt(mean(x)))
apto <- data.frame(neigh="ROSALES", bathr=1,
rms=1, area= 45,logarea = log(45), logarea2=log(45)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=d,
trControl=fitControl)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=d,
trControl=fitControl)
mf_rf <- train(price ~ . -logprice -area - published,
method = "rf",data=d,
trControl=fitControl)
mf_rf
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 35,logarea = log(35), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="ROSALES", bathr=1,
rms=1, area= 50,logarea = log(50), logarea2=log(50)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="MARLY", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(25)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="ROSALES", bathr=1,
rms=1, area= 50,logarea = log(50), logarea2=log(50)^2,
published=as.Date("05/05/2015"), logprice=0)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 35,logarea = log(35), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
mf_rf
mf_rf <- train(price ~ . -logprice -area - published,
method = "rf",mtry=2,data=d,
trControl=fitControl)
mf_rf$finalModel
predict(mf_rf,newdata=apto)
predict(mf_rf$finalModel,newdata=apto)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2)
predict(mf_rf$finalModel,newdata=apto)
mf_rf <- train(price ~ . -logprice -area - published,
method = "rf",mtry=2,data=d,
trControl=fitControl)
mf_rf$finalModel
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
