texto
#Fecha
fecha <- arriendos_elt %>%
html_nodes(".ofertas h6") %>%
html_text()
fecha
#Precio
precio <- arriendos_elt %>%
html_nodes(".precio h3") %>%
html_text()
precio <- precio[-which(precio == "Contacte al anunciante",arr.ind = T)]
precio <- sub("\\$","",precio)
precio <- gsub(",","",precio,fixed=T)
precio <- as.numeric(precio)
#Tipo de contacto
tcontacto <- arriendos_elt %>%
html_nodes(".clasificado .contactar")%>%
html_text()
caract <- arriendos_elt %>%
html_nodes(".ofertas .clasificado .campos")
m <- gregexpr("<li>(.*?)</li>",as.character(caract))
caract <- as.character(regmatches(as.character(caract), m))
html_nodes(caract,".campos li")
html_attrs(caract[2],name = "campo")
#Hipervinculo
hlink <- arriendos_elt %>%
html_nodes(".clasificado .Titulo-Oferta a")
hlinks <- html_attr(hlink,"href")
html_attrs(hlink)[[1]][[1]]
hlink
#NÃºmero de telefono
numero <- arriendos_elt %>%
html_nodes(".clasificado .paso1 li") %>%
html_text()
mtmp <- matrix(numero,nrow = length(numero)/2,ncol = 2,byrow = T)
numero <- paste(mtmp[,1],mtmp[,2],sep="-")
#Data frame
clas <- data.frame(titulo,texto,fecha,precio,numero=NA, caract, hlinks)
clas$numero[tcontacto=="Contactar"] <- numero
clas$fecha <- as.Date(sub("Publicado: ","",fecha),format ="%d/%m/%Y")
head(clas)
write.table(clas,"clipboard",sep="|",row.names = F)
a
d <- read_csv("./data/tidy.csv")
library(readr)
library(dplyr)
d <- read_csv("./data/tidy.csv")
d <- read_csv("./data/tidy.csv")
library(readr)
install.packages("readr")
library(readr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
d <- read_csv("./data/tidy.csv")
setwd("C:/Users/Manuel/Dropbox/3. DSS/DevelopingDataProducts/ShinyApp")
d <- read_csv("./data/tidy.csv")
#Neighborhood as factor
d$neigh <- d$neigh %>% as.factor
#Use only complete cases
d <- subset(d,complete.cases(d))
d <- filter(d, price <= 5.00e+06)
#New variables
d$logarea <- log(d$area) #Area log
d$logarea2 <- log(d$area)^2 #Area log2
d$br <- d$bathr/d$rms #Bath/Rooms
d$ar <- d$area/d$rms #Area/Rooms
d$area <- NULL
d$area <- NULL
d$published <- NULL
mf_rf <- train(price ~ .,
method = "rf",mtry=2,data=d,
trControl=fitControl)
library(caret)
mf_rf <- train(price ~ .,
method = "rf",mtry=2,data=d)
mf_rf$finalModel
mf_rf <- train(price ~ .,
method = "rf",mtry=2,data=d)
warnings()
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1
)
mf_rf <- train(price ~ .,
method = "rf",mtry=2,data=d,
trControl=fitControl)
mf_rf
warnings()
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=d,
trControl=fitControl)
mf_rf <- train(train$price ~ . -logprice -area - published,
method = "rf",data=train,
trControl=fitControl)
mf_rf <- train(price ~ .,
method = "rf",data=d,
trControl=fitControl)
mf_rf
libary(randomFores)
libary(randomForest)
library(randomForest)
library(randomForest)
mf_rf_22 <- randomForest(price ~ .,data=d, mtry=2,ntree=250)
mf_rf_22
mf_rf <- train(price ~ .,
method = "rf",mtry=2,data=d,
trControl=fitControl)
mf_rf
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 1,
## repeated ten times
repeats = 1
)
mf_rf <- train(price ~ .,
method = "rf",data=d,
trControl=fitControl)
mf_rf <- train(price ~ .,
method = "rf",data=d,
trControl=fitControl)
mf_rf
mf_rf$finalModel
mf_rf_22
mf_rf_22 <- randomForest(price ~ .,data=d, mtry=2,ntree=500)
mf_rf_22
mf_rf$finalModel
mf_rf <- randomForest(price ~ .,data=d, mtry=2,ntree=500)
mf_rf
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0)
predict(mf_rf,newdata=apto)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0,
br=bathr/rms,ar=area/rms)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
published=as.Date("05/05/2015"), logprice=0,
br=1/1,ar=25/1)
predict(mf_rf,newdata=apto)
predict(mf_rf,newdata=apto)
coef(mf_rf)
mf_rf$coefs
mf_rf$coefs
mf_rf
summary(mf_rf)$coefs
summary(mf_rf)
forest(mf_rf)
forest(mf_rf)
mf_rf$forest
mf_rf$forest$xbestsplit
plot(mf_rf$forest)
varImpPlot(mf_rf)
apto
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, area= 25,logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
predict(mf_rf,newdata=apto)
apto
str(apto)
str(d)
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
predict(mf_rf,newdata=apto)
str(d)
str(apto)
predict(mf_rf,newdata=apto)
apto
predict(mf_rf,newdata=apto)
mf_rf <- randomForest(price ~ .,data=d, mtry=2,ntree=500)
varImpPlot(mf_rf)
predict(mf_rf,newdata=apto)
str(d)
str(apto)
names(d)
names(apto)
predict(mf_rf,newdata=d[1,])
apto <- data.frame(neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1,price=0)
predict(mf_rf,newdata=apto)
names(apto)
apto <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
predict(mf_rf,newdata=apto)
names(apto)
names(d)
apto <- d[1,]
rbind(apto)
apto <-   data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1) %>% tbl_df
apto
predict(mf_rf,newdata=apto)
apto <- d[1,]
apto <- d[1,]
rbind(apto, data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))
predict(mf_rf,newdata=apto)
apto <-   rbind(apto, data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))
predict(mf_rf,newdata=apto)
apto <-   rbind(apto, data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))[2,]
predict(mf_rf,newdata=apto)
apto <- d[FALSE,]
apto
apto <-   rbind(apto,data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))
apto
predict(mf_rf,newdata=apto)
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
lease <-   rbind(lease,info)[2,]
lease <- d[1,]
lease <-   rbind(lease,info)[2,]
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
br=1/1,ar=25/1)
rms=1, logarea = log(25), logarea2=log(35)^2,
lease <- d[1,]
lease <-   rbind(lease,info)[2,]
lease
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
lease <- d[1,]
lease
lease <- rbind(lease,info)[2,]
lease
predict(mf_rf,newdata=apto)
predict(mf_rf,newdata=apto)
lease <- rbind(lease,info)
predict(mf_rf,newdata=apto)
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=1,
rms=1, logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
lease <- d[1,]
lease <- rbind(lease,info)
lease
d
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
lease <- d[1,]
lease <- rbind(lease,info)
predict(mf_rf,newdata=apto)
lease
d
lease <- rbind(lease,data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))
lease <- d[1,]
lease <- rbind(lease,data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1))
predict(mf_rf,newdata=apto)
lease
lease <- d[1,]
predict(mf_rf,newdata=lease)
lease <- d[1,]
lease <- rbind(lease,info)
predict(mf_rf,newdata=lease)
lease <- d[FALSE,]
lease <- rbind(lease,info)
predict(mf_rf,newdata=lease)
lease
lease <- d[1,]
lease <- rbind(lease,info)
predict(mf_rf,newdata=lease)
lease <- rbind(lease,info)[-1,]
predict(mf_rf,newdata=lease)
lease <- rbind(lease,info)[-1,]
predict(mf_rf,newdata=lease)
rbind(lease,info)
lease <- d[1,]
lease <- rbind(lease,info)[-1,]
predict(mf_rf,newdata=lease)
predict(mf_rf,newdata=lease)
source(read_data.R)
source("read_data.R")
read_data("./data/tidy.csv")
source("read_data.R")
source("predictive_model_rf.R")
source("predictive_model_rf.R")
dir()
source("predictive_model_rf.R")
source("predictive_model_rf.R")
source("read_data.R")
source("predictive_model_rf.R")
d <- read_data("./data/tidy.csv")
d
d <- read_data("./data/tidy.csv")
library(shiny)
library(ggmap)
library(readr)
library(ggplot2)
library(dplyr)
source("read_data.R")
source("predictive_model_rf.R")
d <- read_data("./data/tidy.csv")
source("predictive_model_rf.R")
pred_model <- predictive_model_rf(d)
pred_model
pred_model <- predictive_model_rf(d)
pred_model
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pred_model <- predictive_model_rf(d)
pred_model$coefs
pred_model$localImportance
pred_model$importance
predict(pred_model,newdata=info)
shiny::runApp()
d
as.data.frame(d)
pred_model <- predictive_model_rf(as.data.frame(d))
shiny::runApp()
pred_model$predicted
pred_model$type
pred_model$oob.times
pred_model$test
pred_model$terms
pred_model$terms$dataClasses
pred_model$terms
pred_model$terms[["dataClasses"]]
str(pred_model$terms)
pred_model$terms
dataClasses(pred_model$terms)
class(pred_model$terms)
class(pred_model$terms$terms)
v
pred_model$terms$terms
pred_model$terms$
a <- pred_model$terms$terms
a
a <- pred_model$terms$
a <- pred_model$terms
coef(a)
coeff(a)
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a
attr(a,"dataClasses")
shiny::runApp()
shiny::runApp()
shiny::runApp()
levels(d$neigh)
shiny::runApp()
mf_rf
mf_rf <- randomForest(price ~ .,data=d, mtry=2,ntree=500)
mf_rf
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
info
levels(info$neigh)
levels(d$neigh)
levels(info$neigh) <- levels(d$neigh)
levels(info$neigh)
info$neigh
info
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1)
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1,stringsAsFactors = F)
levels(info$neigh)
levels(info$neigh) <- levels(d$neigh)
levels(info$neigh)
info$neigh
info
str(info)
info$neigh <- factor(info$neigh,levels =levels(d$neigh))
info
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1,stringsAsFactors = F)
info$neigh <- factor(info$neigh,levels =levels(d$neigh))
str(info)
info
shiny::runApp()
shiny::runApp()
shiny::runApp()
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1,stringsAsFactors = F)
info$neigh <- factor(info$neigh,levels =levels(d$neigh))
predict(mf_rf,newdata=info)
predict(mf_rf,newdata=info)
mf_rf
mf_rf$importance
d <- read_data("./data/tidy.csv")
pred_model <- predictive_model_rf(as.data.frame(d))
predict(pred_model,newdata=info)
info <- data.frame(price=0,neigh="TEUSAQUILLO", bathr=as.integer(1),
rms=as.integer(1), logarea = log(25), logarea2=log(35)^2,
br=1/1,ar=25/1,stringsAsFactors = F)
info$neigh <- factor(info$neigh,levels =levels(d$neigh))
predict(pred_model,newdata=info)
shiny::runApp()
getMap <- get_map("Chapinero, Bogota",zoom=14)
ggmap(getMap,extent = "panel")
getMap <- get_map("Camacho, Bogota",zoom=14)
ggmap(getMap,extent = "panel")
getMap <- get_map("Javeriana, Bogota",zoom=14)
ggmap(getMap,extent = "panel")
getMap <- get_map("Javeriana, Bogota",zoom=14)
ggmap(getMap,extent = "panel")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
library(shinyapps)
deployApp()
p?
?p
shiny::runApp()
shiny::runApp()
z <- list(a = letters[1:3], b = (-pi+0i)^((-2:2)/2), c = c(1,10,100,1000),
d = c("a", "longer", "character", "string"),
q = quote( a + b ), e = expression(1+x))
## can you find the "2" small differences?
(f1 <- format(z, digits = 2))
(f2 <- format(z, digits = 2, justify = "left", trim = FALSE))
f1 == f2 ## 2 FALSE, 4 TRUE
z <- list(a = letters[1:3], b = (-pi+0i)^((-2:2)/2), c = c(1,10,100,1000),
d = c("a", "longer", "character", "string"),
q = quote( a + b ), e = expression(1+x))
## can you find the "2" small differences?
(f1 <- format(z, digits = 2))
format(100000.2342,digits=0)
format(100000.2342,digits=0,trim = F)
format(100000.2342,digits=0,trim = T)
format(100000.2342,digits=0,scientific = F)
format(1120000.2342,digits=0,scientific = F)
format(1120000.2342,digits=0,scientific = F,decimal.mark = )
format(1120000.2342,digits=0,scientific = F,decimal.mark = T)
format(1120000.2342,digits=0,scientific = F,decimal.mark = F)
format(1120000.2342,digits=0,scientific = F,small.mark = ",")
format(1120000.2342,digits=0,scientific = F,big.mark = ",")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ggmap(getMap,extent = "panel")+ylab("Latitude")+xlab("Longitude")
deployApp()
shiny::runApp()
deployApp()
shiny::runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp(display.mode = "showcase")
shiny::runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?p()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
